---
write_files:
  - path: /root/install-certificates.py
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env python3
      """Install certificates from AWS Certificate Manager.

      This file is a template.  It should be processed by terraform.
      """

      import boto3


      # Create ACM client
      sts = boto3.client("sts", region_name="${cert_manager_region}")

      try:
          stsresponse = \
              sts.assume_role(RoleArn="${cert_read_role_arn}",
                              RoleSessionName="cert_installation")
          newsession_id = stsresponse["Credentials"]["AccessKeyId"]
          newsession_key = stsresponse["Credentials"]["SecretAccessKey"]
          newsession_token = stsresponse["Credentials"]["SessionToken"]
          acm = boto3.client(
            "acm",
            region_name="${cert_manager_region}",
            aws_access_key_id=newsession_id,
            aws_secret_access_key=newsession_key,
            aws_session_token=newsession_token
          )
          # Describe the specified certificate.
          response = \
              acm.export_certificate(CertificateArn="${server_certificate_arn}",
                                     Passphrase=b"BOGUS")

          print("\n\rCertificate:\n\r")
          print(response["Certificate"])
          print("CertificateChain:\n\r")
          print(response["CertificateChain"])
          print("PrivateKey:\n\r")
          print(response["PrivateKey"])

      except acm.exceptions.ResourceNotFoundException as e:
          print(e.response["Error"]["Code"] + ": " +
              e.response["Error"]["Message"])
          exit(1)

      except acm.exceptions.RequestInProgressException as e:
          print(e.response["Error"]["Code"] + ": " +
              e.response["Error"]["Message"])
          exit(1)

      except Exception:
          print("There was an error.")
          exit(1)
runcmd:
  - /root/install-certificates.py
